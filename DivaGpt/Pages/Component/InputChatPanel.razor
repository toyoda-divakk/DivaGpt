@* 
    チャット入力欄
    説明、文字入力欄、送信ボタンだけのコンポーネント 
*@
@inherits InputBase

<InputTextArea id="chatInput" class="form-control" @oninput="OnInput" @bind-Value="Text" placeholder="@Placeholder" rows="@Rows" disabled="@IsSubmitted" />
<div class="col-4">
    <button class="mt-3 btn btn-primary" @onclick="SubmitAsync" disabled="@(IsDisableButton || IsSubmitted)">@SubmitText (Shift + Enter)</button>
    <button class="mt-3 ms-5 btn btn-primary" @onclick="RequestContinueAsync" disabled="@IsSubmitted">続きを要求する (Alt + Enter)</button>
</div>
@if (!string.IsNullOrWhiteSpace(Error))
{
    <p class="text-danger">@Error</p>
}

@code {
    /// <summary>入力例</summary>
    [Parameter]
    public string Placeholder { get; set; } = "質問を入力してください。";
    /// <summary>送信ボタン</summary>
    [Parameter]
    public string SubmitText { get; set; } = "送信";
    /// <summary>送信中</summary>
    [Parameter]
    [EditorRequired]
    public bool IsSubmitted { get; set; } = false;

    /// <summary>
    /// エラーが出たら表示し、ユーザーに再送を促す
    /// </summary>
    [Parameter]
    public string Error { get; set; } = string.Empty;

    /// <summary>
    /// 送信ボタン処理
    /// </summary>
    /// <returns></returns>
    public async Task SubmitAsync()
    {
        Text = _text;
        if (IsDisableButton || IsSubmitted) return;
        await OnButtonClickedAsync();
    }

    /// <summary>
    /// 続きを要求するボタン処理
    /// </summary>
    /// <returns></returns>
    public async Task RequestContinueAsync()
    {
        if (IsSubmitted) return;
        Text = "続きを書いて";
        _text = "続きを書いて";

        await OnButtonClickedAsync();    // 送信ボタンと同じ処理
    }

    /// <summary>
    /// テキストをセットする
    /// </summary>
    /// <returns></returns>
    public void SetText(string text)
    {
        _text = text;
        Text = text;
        Rows = Math.Max(3, Text.Length - Text.Replace("\n", "").Length + 1);
    }
}
